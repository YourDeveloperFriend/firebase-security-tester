// Generated by CoffeeScript 1.6.3
(function() {
  var Expression, Rule, RuleAuth, RuleBoolean, RuleInt, RuleObject, RulePart, RuleString, _ref, _ref1, _ref2, _ref3, _ref4,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = Rule = (function() {
    function Rule(ruleString) {}

    Rule.createRule = function(ruleValue) {
      var rule;
      rule = new Rule();
      return rule.value = ruleValue;
    };

    return Rule;

  })();

  Expression = (function() {
    function Expression(value1, value2, operation) {
      this.value1 = value1;
      this.value2 = value2;
      this.operation = operation;
      this.values[0] = {
        raw: value1,
        type: this.extractType(value1)
      };
    }

    Expression.prototype.operate = function(data) {
      return this;
    };

    return Expression;

  })();

  RulePart = (function() {
    function RulePart(testContext, value) {
      this.testContext = testContext;
      this.value = value;
    }

    RulePart.prototype.notEquals = function(other) {
      return this.equals(other).not();
    };

    return RulePart;

  })();

  RuleString = (function(_super) {
    __extends(RuleString, _super);

    function RuleString() {
      _ref = RuleString.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    RuleString.prototype.equals = function(string) {
      return new RuleBoolean(string instanceof RuleString && string.resolve() === this.resolve());
    };

    RuleString.prototype.check = function(string) {
      if (!(string instanceof RuleString)) {
        throw new Error('IncorrectTypes');
      }
    };

    RuleString.prototype.resolve = function() {
      if (_.isString(this.value)) {
        return this.value;
      } else {
        return this.testContext.evaluate(this.value, RuleString);
      }
    };

    RuleString.prototype.concat = function(string) {
      this.check(string);
      return new RuleString(this.resolve() + string.resolve());
    };

    RuleString.prototype.lessThan = function(string) {
      this.check(string);
      return new RuleBoolean(this.resolve() < string.resolve());
    };

    RuleString.prototype.lessThanOrEquals = function(string) {
      return this.greaterThan(string).not();
    };

    RuleString.prototype.greaterThan = function(string) {
      this.check(string);
      return new RuleBoolean(this.resolve() < string.resolve());
    };

    RuleString.prototype.greaterThanOrEquals = function(string) {
      return this.lessThan(string).not();
    };

    return RuleString;

  })(RulePart);

  RuleInt = (function(_super) {
    __extends(RuleInt, _super);

    function RuleInt() {
      _ref1 = RuleInt.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    return RuleInt;

  })(RulePart);

  RuleObject = (function(_super) {
    __extends(RuleObject, _super);

    function RuleObject() {
      _ref2 = RuleObject.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    RuleObject.prototype.dotAccess = function(accessor) {};

    return RuleObject;

  })(RulePart);

  RuleAuth = (function(_super) {
    __extends(RuleAuth, _super);

    function RuleAuth() {
      _ref3 = RuleAuth.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    return RuleAuth;

  })(RulePart);

  RuleBoolean = (function(_super) {
    __extends(RuleBoolean, _super);

    function RuleBoolean() {
      _ref4 = RuleBoolean.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    RuleBoolean.prototype.equals = function(boolean) {
      return new RuleBoolean(boolean instanceof RuleBoolean && boolean.resolve() === this.resolve());
    };

    RuleBoolean.prototype.and = function(boolean) {
      this.check(boolean);
      return new RuleBoolean(this.resolve() && boolean.resolve());
    };

    RuleBoolean.prototype.or = function(boolean) {
      this.check(boolean);
      return new RuleBoolean(this.resolve() || boolean.resolve());
    };

    RuleBoolean.prototype.not = function() {
      return new RuleBoolean(!this.resolve());
    };

    RuleBoolean.prototype.check = function(boolean) {
      if (!(boolean instanceof RuleBoolean)) {
        throw new Error('IncorrectTypes');
      }
    };

    RuleBoolean.resolve = function() {
      if (_.isBoolean(this.value)) {
        return this.value;
      } else {
        return this.testContext.evaluate(this.value, RuleBoolean);
      }
    };

    return RuleBoolean;

  })(RulePart);

}).call(this);
