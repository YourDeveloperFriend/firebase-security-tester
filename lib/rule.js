// Generated by CoffeeScript 1.6.3
(function() {
  var PEG, Q, RuleParser, cache, data, fs, overrideAction, uuid;

  PEG = require('pegjs');

  overrideAction = require('pegjs-override-action');

  fs = require('fs');

  Q = require('q');

  uuid = require('uuid');

  cache = require('./cache');

  RuleParser = (function() {
    function RuleParser(data) {
      this.data = data;
    }

    RuleParser.prototype.executeRule = function(ruleData, rule) {
      var $value, $variable, id, newData, parser, replaceWith, variableSet, variableValues, _i, _len, _ref;
      id = uuid.v4();
      replaceWith = [];
      cache[id] = ruleData;
      variableSet = '';
      variableValues = [void 0, void 0, void 0, void 0, void 0];
      _ref = ruleData.$variables;
      for ($value = _i = 0, _len = _ref.length; _i < _len; $value = ++_i) {
        $variable = _ref[$value];
        replaceWith.push("/ '" + $variable + "' ");
        variableValues.push($variable);
        variableSet += "\t\t" + $variable + " = cache.$variables['" + variable + "'],\n";
      }
      newData = this.data.replace("// $variables", replaceWith);
      parser = PEG.buildParser(newData, {
        plugins: [overrideAction],
        overrideActionPlugin: {
          initializer: "					var cache = require('" + __dirname + "/cache')['" + id + "'],						data = cache.data,						newData = cache.newData,						auth = cache.auth,						" + variableSet + "						root = cache.root;					",
          rules: {
            rawObject: variableValues
          }
        }
      });
      return parser.parse(rule);
    };

    return RuleParser;

  })();

  data = fs.readFileSync(__dirname + '/grammar.pegjs', 'utf8');

  module.exports = new RuleParser(data);

}).call(this);
